@page "/ChangePassword"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

<PageTitle>Cambio de Contraseña</PageTitle>
<MudText Align="Align.Left" Typo="Typo.h3">Cambio de Contraseña</MudText>

<EditForm Model="@request">
    <MudGrid Style="padding:50px">

        <MudItem xs="12" sm="6" md="6">
            <MudTextField T="string" @bind-Value="request.OldPassword" Label="Contraseña Actual" Variant="Variant.Text" Lines="1"/>
            
            <MudTextField T="string" Label="Nueva Contraseña" HelperText="Ingrese una contraseña fuerte" @ref="password"
                          InputType="InputType.Password" 
                          Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                          RequiredError="Ingrese una contraseña" />
            <MudTextField T="string"
                          Label="Confirme su Contraseña" HelperText="Repita su contraseña" InputType="InputType.Password" @bind-Value="confirmedPassword"
                          Validation="@(new Func<string, string>(PasswordMatch))" />
        
        </MudItem>
        

    </MudGrid>
    <MudContainer Class="d-flex flex-column justify-center" Style="width: 300px;padding:30px">
        <MudButton OnClick="changePassword" Variant="Variant.Filled" StartIcon="@Icons.Rounded.Password" Color="Color.Success" Size="Size.Large">
            <MudText>Cambiar Contraseña</MudText>
        </MudButton>

    </MudContainer>
</EditForm>

@code {
    private ChangePasswordRequest request = new();

    private  MudTextField<string> password;
    private  string confirmedPassword = "";

    private  string currentPassword = "";


    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Ingrese una Contraseña";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Debe contener al menos una letra mayúscula";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Debe contener al menos una letra minúscula";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Debe contener al menos un dígito";
        if (!Regex.IsMatch(pw, @"[-+_*?¡¿!#$%&^{}]"))
            yield return "Debe contener al menos un caracter especial";
    }

    private string PasswordMatch(string arg)
    {
        if (password.Value != arg)
            return "Las contraseñas no coinciden";
        return null;
    }


    private async Task changePassword()
    {
        var userId = await sessionStorage.GetItemAsync<string>("Id-Usuario");

        request.NewPassword = confirmedPassword;
        request.UserId = userId;
        var response = await apiService.HttpClient.PutAsJsonAsync("/api/Identity/changePassWord", request);
        try
        {
            response.EnsureSuccessStatusCode();
            request.OldPassword = "";
            snackBar.Add("Contraseña cambiada exitosamente", MudBlazor.Severity.Success);
        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", MudBlazor.Severity.Error);
        }
    }
}
