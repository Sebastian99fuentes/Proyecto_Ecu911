@page "/"


<PageTitle>Procesos Activos</PageTitle>
<MudCardContent Class="d-flex  flex-column  align-center  ">

    <MudText Typo="Typo.h3" GutterBottom="true">Procesos Activos</MudText>
    
    <MudText Class="mb-8">Tus procesos son:</MudText>

   
@*        <MudPaper Class="pa-16 ma-2" Elevation="3">
            <MudItem xs="12">
                <MudText Typo="Typo.h4" Class="d-flex flex-column align-center" Style="width: 100%; height:100%;">No se econtraron procesos</MudText>
            </MudItem>
        </MudPaper>
  *@
   
   <MudPaper Class="pa-16 ma-2" Elevation="3">
    <MudGrid>
          <AuthorizeView Roles="SUPERADMINISTRADOR,ADMINISTRADOR">
           <MudItem xs="12" sm="4" md="4" Class="d-flex  flex-column  align-center">            
                <MudItem xs="12" sm="6" md="6" Class="d-flex  flex-column  align-center">
                <MudSelect T="string" Placeholder="seleccione una unidad" @bind-Value="searchString1" Label="Sector opcional" AnchorOrigin="Origin.BottomCenter" OnOpen="BuscarUnidad" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
                @foreach (var val in unidad)
                {
                    <MudSelectItem Value="@val.UnidadId"> @val.nombre </MudSelectItem>
                }
            </MudSelect>

               </MudItem>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled"  Color="Color.Info" OnClick="BuscarArea">Buscar</MudButton>
                 
        </MudItem>
            <MudItem xs="12" sm="4" md="4" Class="d-flex  flex-column  align-center">
                <MudItem xs="12" sm="6" md="6" Class="d-flex  flex-column  align-center">

                    <MudText>Buscar Todos Los procesos</MudText>
                </MudItem>
                
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled"  Color="Color.Info" OnClick="BuscarProcesosTodos">Buscar </MudButton>
            </MudItem>
        </AuthorizeView>


        <MudSimpleTable Hover="true" Dense="true" FixedHeader="@fixedheader" Striped="true" Style="@(fixedheader?"height:50%;":"")">

            <thead>
                <tr>

                    <th>Avance </th>
                    <th>Descripcion </th>
                    <th>Estado </th>
                    <th> </th>
                    <th>Etapa </th>
                    <th>Proceso de Contratacion</th>
                    <th>Mes Planificado </th>
                    <th> </th>
                    <th>Opciones </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>

                <Virtualize Items="procesos" Context="item">

                    <tr @key="@item.ProcesoCompraId">
                        @if(item.Avance== null){
                        <td>0 %</td>
                        }
                        else{
                        <td>@item.Avance %</td>
                        }
                        <td>@item.descripcion</td>
                        <td>@item.Estado.tipoEstado</td>
                        <th><MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Tertiary" OnClick="@(e => NavigateActualizarEs(@item.ProcesoCompraId))">Actualizar</MudButton></th>
                        <td>@item.Etapa.tipoEtapa</td>
                        <td>@item.Procedimiento.tipoProcedimiento</td>
                        <td>@item.mesPlanificado</td>


                        <th><MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Login" Color="Color.Info" OnClick="@(e => NavigateEstados(@item.ProcesoCompraId))">Revisar</MudButton></th>
                        <th><MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Warning" OnClick="@(e => NavigateObservaciones(@item.ProcesoCompraId))">Observaciones</MudButton></th>
                        <th><MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Warning" OnClick="@(e => NavigateAlertas(@item.ProcesoCompraId))">Alertas</MudButton></th>
                    </tr>
                </Virtualize>



            </tbody>
        </MudSimpleTable>
 
    </MudGrid>
</MudPaper>



    <MudPaper Class="pa-16 ma-2" Elevation="0">
        <MudItem xs="12">
            <MudText Typo="Typo.h6" Class="d-flex flex-column align-center" Style="width: 100%; height:100%;">© 1822-2023</MudText>
            <MudText Typo="Typo.h6" Class="d-flex flex-column align-center" Style="width: 100%; height:100%;">ecu911.gob.ec</MudText>
        </MudItem>
    </MudPaper>
</MudCardContent>


@code {



    private IEnumerable<ProcesoCompra> Elements = new List<ProcesoCompra>();


    private  bool fixedheader = true;
    private string searchString1= null;
    private  List<ProcesoCompra> procesos = new();
    private List<Unidad> unidad = new();
    private string fileNameRole;


    protected override async Task OnInitializedAsync()
    {



        if (searchString1 == null)
        {
            await BuscarProcesosArea();

        }
 

    }

    private async Task BuscarProcesosTodos()
    {
        var response = await apiService.HttpClient.GetAsync("/api/ProcesoCompra");
        try
        {
            response.EnsureSuccessStatusCode();
            procesos = await response.Content.ReadFromJsonAsync<List<ProcesoCompra>>();
        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", severity: Severity.Error);
        }
    }
    private async Task BuscarArea()
    {
        if (searchString1 != null) 
        {
            
            var response = await apiService.HttpClient.GetAsync($"/api/ProcesoCompra/area?idArea={searchString1}");
            try
            {
                response.EnsureSuccessStatusCode();
                procesos = await response.Content.ReadFromJsonAsync<List<ProcesoCompra>>();
            }
            catch (HttpRequestException)
            {
                var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
                snackBar.Add($"{data.Message}", severity: Severity.Error);
            }
        }
       
    }


    private async Task BuscarProcesosArea()
    {
        var areaId = await sessionStorage.GetItemAsync<string>("Id-Area");
        var response = await apiService.HttpClient.GetAsync($"/api/ProcesoCompra/area?idArea={areaId}");
        try
        {
            response.EnsureSuccessStatusCode();
            procesos = await response.Content.ReadFromJsonAsync<List<ProcesoCompra>>();
        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", severity: Severity.Error);
        }
    }

    private async Task BuscarUnidad()
    {
        var response = await apiService.HttpClient.GetAsync("/api/PlantaUnidadArea");
        try
        {
            response.EnsureSuccessStatusCode();
            unidad = await response.Content.ReadFromJsonAsync<List<Unidad>>();
        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", severity: Severity.Error);
        }
    }



    void NavigateActualizarEs(string id)
    {
        navManager.NavigateTo($"ActualizarProceso/{id}");
    }


    void NavigateEstados(string id)
    {
        navManager.NavigateTo($"EstadosProcesoRevision/{id}");
    }
    void NavigateObservaciones(string id)
    {
        navManager.NavigateTo($"Observaciones/{id}");
    }

    void NavigateAlertas(string id)
    {
        navManager.NavigateTo($"Alertas/{id}");
    }


}

