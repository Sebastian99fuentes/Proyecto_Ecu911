@page "/"


<PageTitle>Procesos Activos</PageTitle>
<MudCardContent Class="d-flex  flex-column  align-center  ">

    <MudText Typo="Typo.h3" GutterBottom="true">Procesos Activos</MudText>
    
    <MudText Class="mb-8">Tus procesos son:</MudText>

   <MudPaper Class="pa-16 ma-2" Elevation="3">
    <MudGrid>
          <AuthorizeView Roles="SUPERADMINISTRADOR,ADMINISTRADOR">
           <MudItem xs="12" sm="4" md="4" Class="d-flex  flex-column  align-center">            
                <MudItem xs="12" sm="6" md="6" Class="d-flex  flex-column  align-center">
                <MudSelect T="string" Placeholder="seleccione una unidad" @bind-Value="searchString1" Label="Sector opcional" AnchorOrigin="Origin.BottomCenter" OnOpen="BuscarUnidad" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
                @foreach (var val in unidad)
                {
                    <MudSelectItem Value="@val.UnidadId"> @val.nombre </MudSelectItem>
                }
            </MudSelect>

               </MudItem>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Info" OnClick="BuscarPorArea">Buscar</MudButton>
                 
        </MudItem>
            <MudItem xs="12" sm="4" md="4" Class="d-flex  flex-column  align-center">
                <MudItem xs="12" sm="6" md="6" Class="d-flex  flex-column  align-center">

                    <MudText>Buscar Todos Los procesos</MudText>
                </MudItem>

                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Info" OnClick="BuscarProcesosTodosfiltro">Buscar </MudButton>
            </MudItem>
        </AuthorizeView>


        <MudSimpleTable Hover="true" Dense="true" FixedHeader="@fixedheader" Striped="true" Style="@(fixedheader?"height:50%;":"")">

            <thead>
                <tr>
                        <th>ID </th>
                    <th>Avance </th>
                    <th>Descripcion </th>
                    <th>Estado </th>
                    <th> </th>
                    <th>Etapa </th>
                    <th>Proceso de Contratacion</th>
                    <th>Mes Planificado </th>
                    <th> </th>
                    <th>Opciones </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>

                    <Virtualize Items="procesos" Context="item">

                    <tr @key="@item.IDproceso">
                            <td>@item.IDproceso</td>
                        @if(item.Avance== null){
                        <td>0 %</td>
                        }
                        else{
                        <td>@item.Avance %</td>
                        }
                        <td>

                                <MudButton @onclick="(e =>Confirm(item.Descripcion))" Variant="Variant.Filled" Color="Color.Primary">Descripción</MudButton>
                            </td>
                        <td>@item.Estado</td>
                            <th><MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Info" OnClick="@(e => NavigateActualizarEs(@item.IDproceso))">Actualizar</MudButton></th>
                        <td>@item.Etapa</td>
                        <td>@item.ProcesoContra</td>
                        <td>@item.MesPlanificado</td>


                        <th><MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Login" Color="Color.Info" OnClick="@(e => NavigateEstados(@item.IDproceso))">Revisar</MudButton></th>
                        <th><MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Warning" OnClick="@(e => NavigateObservaciones(@item.IDproceso))">Observaciones</MudButton></th>
                            <th><MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Warning" OnClick="@(e => NavigateAlertas(@item.IDproceso))">Alertas</MudButton></th>
                    </tr>
                </Virtualize>



            </tbody>
        </MudSimpleTable>
 
    </MudGrid>
</MudPaper>



    <MudPaper Class="pa-16 ma-2" Elevation="0">
        <MudItem xs="12">
            <MudText Typo="Typo.h6" Class="d-flex flex-column align-center" Style="width: 100%; height:100%;">© 1822-2023</MudText>
            <MudText Typo="Typo.h6" Class="d-flex flex-column align-center" Style="width: 100%; height:100%;">ecu911.gob.ec</MudText>
        </MudItem>
    </MudPaper>
</MudCardContent>


@code {



    private IEnumerable<ProcesoCompra> Elements = new List<ProcesoCompra>();



    private  bool fixedheader = true;
    private string searchString1="";
    private List<Unidad> unidad = new();
    private string fileNameRole;
    private List<Proceesofiltrocs> procesos = new();

    protected override async Task OnInitializedAsync()
    {
        var cambio = await sessionStorage.GetItemAsync<string>("Cambio");
        if (cambio == "True")
        {
            CambiarPswUser();
            cambio = "false";
        }

        await BuscarProcesosArea();

    }



    private async Task BuscarProcesosTodosfiltro()
    {


        var response = await apiService.HttpClient.GetAsync("/api/ProcesoCompra/ProcesoFiltro");
        try
        {
            response.EnsureSuccessStatusCode();
            procesos = await response.Content.ReadFromJsonAsync<List<Proceesofiltrocs>>();
        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", severity: Severity.Error);
        }
    }

    private async Task BuscarPorArea()
    {


        var response = await apiService.HttpClient.GetAsync($"/api/ProcesoCompra/area?idArea={searchString1}");
        try
        {
            response.EnsureSuccessStatusCode();
            procesos = await response.Content.ReadFromJsonAsync<List<Proceesofiltrocs>>();
        }
        catch (HttpRequestException)
        {
             procesos.Clear();
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
                snackBar.Add($"{data.Message}", severity: Severity.Error);
            }
        
       
    }

    private async Task BuscarProcesosArea()
    {
        var areaId = await sessionStorage.GetItemAsync<string>("Id-Area");
        var response = await apiService.HttpClient.GetAsync($"/api/ProcesoCompra/area?idArea={areaId}");
        try
        {
            response.EnsureSuccessStatusCode();
            procesos = await response.Content.ReadFromJsonAsync<List<Proceesofiltrocs>>();
        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", severity: Severity.Error);
        }
    }

    private async Task BuscarUnidad()
    {
        var response = await apiService.HttpClient.GetAsync("/api/PlantaUnidadArea");
        try
        {
            response.EnsureSuccessStatusCode();
            unidad = await response.Content.ReadFromJsonAsync<List<Unidad>>();
        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", severity: Severity.Error);
        }
    }

    private async Task PaswUserChang()
    {

        var userId = await sessionStorage.GetItemAsync<string>("Id-Usuario");
        var response = await apiService.HttpClient.GetAsync($"/api/User/id?id={userId}");
        try
        {
            response.EnsureSuccessStatusCode();
            procesos = await response.Content.ReadFromJsonAsync<List<Proceesofiltrocs>>();
        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", severity: Severity.Error);
        }
    }

    private void CambiarPswUser()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Se requiere que cambies tu contraseña ");
        parameters.Add("ButtonText", "Cambiar");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        DialogService.Show<DialogTemplateExample_Dialog>("Alerta", parameters, options);
    }

    private void Confirm( string Descripcion)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", Descripcion);
        parameters.Add("ButtonText", "Ok");
        parameters.Add("Color", Color.Info);

        DialogService.Show<MudDialogos>("Descripción", parameters);
    }


    void NavigateActualizarEs(string id)
    {
        navManager.NavigateTo($"ActualizarProceso/{id}");
    }


    void NavigateEstados(string id)
    {
        navManager.NavigateTo($"EstadosProcesoRevision/{id}");
    }
    void NavigateObservaciones(string id)
    {
        navManager.NavigateTo($"Observaciones/{id}");
    }

    void NavigateAlertas(string id)
    {
        navManager.NavigateTo($"Alertas/{id}");
    }





}

