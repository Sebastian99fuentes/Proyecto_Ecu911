@page "/"


<PageTitle>Procesos Activos</PageTitle>
<MudCardContent Class="d-flex  flex-column  align-center  ">

    <MudText Typo="Typo.h3" GutterBottom="true">Procesos Activos</MudText>
    <MudText Class="mb-8">Tus procesos son:</MudText>
    <MudGrid>
           <MudItem xs="12" sm="4" md="4" Class="d-flex  flex-column  align-center">

                <MudTextField @bind-Value="searchString1" Placeholder="Buscar" Adornment="Adornment.Start" Label="Estado" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
               </MudItem>
                <MudItem xs="12" sm="4" md="4" Class="d-flex  flex-column  align-center">
            <MudTextField @bind-Value="searchString1" Placeholder="Buscar" Adornment="Adornment.Start" Label="Etapa" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
               </MudItem>
                <MudItem xs="12" sm="4" md="4" Class="d-flex  flex-column  align-center">
            <MudTextField @bind-Value="searchString1" Placeholder="Buscar" Adornment="Adornment.Start" Label="Unidad" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
               </MudItem>
     
        <MudSimpleTable Hover="true" Dense="true" FixedHeader="@fixedheader" Striped="true"  Style="@(fixedheader?"height:50%;":"")">

            <thead>
                <tr>

                    <th>Avance </th>
                    <th>Descripcion </th>
                    <th>Estado </th>
                    <th> </th>
                    <th>Etapa </th>
                    <th>Proceso de Contratacion</th>
                    <th>Mes Planificado </th>
                    <th> </th>
                    <th>Opciones </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                <Virtualize Items="procesos" Context="item">

                    <tr @key="@item.ProcesoCompraId">
                        @if(item.Avance== null){
                        <td>0 %</td>
                        }
                        else{
                        <td>@item.Avance %</td>
                        }
                        <td>@item.descripcion</td>
                        <td>@item.Estado.tipoEstado</td>
                        <th><MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Tertiary" OnClick="@(e => NavigateActualizarEs(@item.ProcesoCompraId))">Actualizar</MudButton></th>
                        <td>@item.Etapa.tipoEtapa</td>
                        <td>@item.Procedimiento.tipoProcedimiento</td>
                        <td>@item.mesPlanificado</td>


                        <th><MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Login" Color="Color.Info" OnClick="@(e => NavigateEstados(@item.ProcesoCompraId))">Revisar</MudButton></th>
                        <th><MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Warning" OnClick="@(e => NavigateObservaciones(@item.ProcesoCompraId))">Observaciones</MudButton></th>
                        <th><MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Warning" OnClick="@(e => NavigateAlertas(@item.ProcesoCompraId))">Alertas</MudButton></th>
                    </tr>
                </Virtualize>



            </tbody>
        </MudSimpleTable>
    </MudGrid>


</MudCardContent>


@code {
    bool fixedheader = true;
    string searchString1;
    private  List<ProcesoCompra> procesos = new();

    int id = 0;
    protected override async Task OnInitializedAsync()
    {
        var response = await apiService.HttpClient.GetAsync("/api/ProcesoCompra");
        try
        {
            response.EnsureSuccessStatusCode();
            procesos = await response.Content.ReadFromJsonAsync<List<ProcesoCompra>>();
        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", severity: Severity.Error);
        }
    }


 
    void NavigateActualizarEs(string id)
    {
        navManager.NavigateTo($"ActualizarProceso/{id}");
    }


    void NavigateEstados(string id)
    {
        navManager.NavigateTo($"EstadosProcesoRevision/{id}");
    }
    void NavigateObservaciones(string id)
    {
        navManager.NavigateTo($"Observaciones/{id}");
    }

    void NavigateAlertas(string id)
    {
        navManager.NavigateTo($"Alertas/{id}");
    }


}

