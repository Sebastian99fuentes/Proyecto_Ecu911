@page "/"



<PageTitle>Procesos Activos</PageTitle>

 <MudCardContent Class="d-flex  flex-column  align-center  ">

    <MudText Typo="Typo.h3" GutterBottom="true">Procesos Activos</MudText>
    <MudText Class="mb-8">Tus procesos son:</MudText>
    <MudGrid>
        <MudSimpleTable Style="overflow-x: auto;">
            <thead>
                <tr>
                   
                    <th >No. </th>
                    <th >Descripcion </th>
                    <th >Estado </th>
                    <th >Etapa </th>
                    <th >Proceso de Contratacion</th>
                    <th >Mes Planificado </th>
                    <th >Opciones </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in procesos)
                {
                    <tr>
                      
                        <td >@item.numProceso</td>
                        <td >@item.descripcion</td>
                        <td >@item.Estado.tipoEstado</td>
                        <td >@item.Etapa.tipoEtapa</td>
                        <td >@item.Procedimiento.tipoProcedimiento</td>
                        <td >@item.mesPlanificado</td>


                        <th><MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Login" Color="Color.Info" OnClick="@(e => NavigateEstados(@item.ProcesoCompraId))" >Revisar</MudButton></th>
                        <th><MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Login" Color="Color.Info" OnClick="@(e => NavigateObservaciones(@item.ProcesoCompraId))">Obeservaciones</MudButton></th>
                        <th><MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Login" Color="Color.Info" OnClick="@(e => NavigateAlertas(@item.ProcesoCompraId))">Alertas</MudButton></th>
                    </tr>
                }
            </tbody>
        </MudSimpleTable>
    </MudGrid>


     </MudCardContent>

@code {

    DateTime? datesf;
    List<ProcesoCompra> procesos = new();

    int id = 0;
    protected override async Task OnInitializedAsync()
    {
        var response = await apiService.HttpClient.GetAsync("/api/ProcesoCompra");
        try
        {
            response.EnsureSuccessStatusCode();
            procesos = await response.Content.ReadFromJsonAsync<List<ProcesoCompra>>();
        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", severity: Severity.Error);
        }
    }




    
    void NavigateEstados(string id)
    {
        navManager.NavigateTo($"EstadosProcesoRevision/{id}");
    }
    void NavigateObservaciones(string id)
    {
        navManager.NavigateTo($"Observaciones/{id}");
    }

    void NavigateAlertas(string id)
    {
        navManager.NavigateTo($"Alertas/{id}");
    }

}

