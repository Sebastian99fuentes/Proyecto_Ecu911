@page "/ActualizarProceso"
@page "/ActualizarProceso/{ID}"
<PageTitle>Actualizar Proceso</PageTitle>

<MudText Align="Align.Center" Typo="Typo.h3">Actualizar Proceso </MudText>

<EditForm Model="@regisupdt">
    <MudGrid Style="padding:50px">

        <MudItem xs="8" sm="6" md="6">

            <MudSelect T="string" Placeholder="Selecciona Estado" @bind-Value="regisupdt.EstadoId" Label="Estado" AnchorOrigin="Origin.BottomCenter" OnOpen="BuscarEstado">
                @foreach (var valor in estado)
                {

                    <MudSelectItem Value="@valor.EstadoId"> @valor.tipoEstado </MudSelectItem>
                }
            </MudSelect>

        </MudItem>

        <MudItem xs="10" sm="6" md="6">

            <MudSelect T="string" Placeholder="seleccione ProcedimientoContratacion" @bind-Value="regisupdt.ProcedimientoId" Label=" Procedimiento Contratacion" OnOpen="BuscarProcedimientoContra" AnchorOrigin=" Origin.BottomCenter" Disabled="true">
                @foreach (var valor in registroProcedimientos)
                {

                    <MudSelectItem Value="@valor.ProcedimientoContratacionId"> @valor.tipoProcedimiento </MudSelectItem>
                }
            </MudSelect>
        </MudItem>

        <MudItem xs="10" sm="6" md="6">
            <MudSelect T="string" Placeholder="Selecciona Etapa" @bind-Value="regisupdt.EtapaId" Label="Etapa" AnchorOrigin="Origin.BottomCenter" OnOpen="BuscarEtapa">
                @foreach (var valor in etapa)
                {

                    <MudSelectItem Value="@valor.EtapaId"> @valor.tipoEtapa </MudSelectItem>
                }
            </MudSelect>


        </MudItem>

        <MudItem xs="8" sm="6" md="6">
            <MudTextField T="string" @bind-Value="regisupdt.cpc" Label="CPC" Variant="Variant.Text" Lines="1" Disabled="true" />
        </MudItem>

        <MudItem xs="8" sm="6" md="6">
            <MudSelect T="string" @bind-Value="regisupdt.grupoGasto" Label="Grupo de Gasto" AnchorOrigin="Origin.BottomCenter" Disabled="true">
                <MudSelectItem Value="@("53")" />
                <MudSelectItem Value="@("84")" />
            </MudSelect>
        </MudItem>

        <MudItem xs="6" sm="6" md="6">
            @*OnOpen="BuscarItemPresupuestario"*@
            <MudSelect T="string" Placeholder="Selecciona Item" @bind-Value="regisupdt.itemPresup" Label="Item presupuestario" AnchorOrigin="Origin.BottomCenter" Disabled="true">
                @foreach (var valor in itemspre)
                {
                    <MudSelectItem Value="@valor.nunItem"> @valor.nunItem </MudSelectItem>
                }
            </MudSelect>
        </MudItem>

        <MudItem xs="6" sm="6" md="6">

            <MudNumericField @bind-Value="regisupdt.cuatrimestre" Label="Cuatrimestre Planificado" Min="0" Max="4" Disabled="true" />
        </MudItem>
        <MudItem xs="6" sm="6" md="6">
            <MudTextField T="string" @bind-Value="regisupdt.mesPlanificado" Label="Mes Planificado" Variant="Variant.Text" Lines="1" Disabled="true" />
        </MudItem>
        <MudItem xs="6" sm="6" md="6">
            <MudNumericField Immediate="false" HideSpinButtons="true" Label="Total (Incluye IVA)" Format="N2" T="decimal" @bind-Value="regisupdt.total" Disabled="true" />
        </MudItem>
        <MudItem xs="6" sm="6" md="6">
           @* OnOpen="BuscarUnidad"*@
            <MudSelect T="string" Placeholder="seleccione una unidad" @bind-Value="regisupdt.sectorOpcional" Label="Sector opcional" AnchorOrigin="Origin.BottomCenter" Disabled="true">
                @foreach (var val in unidad)
                {

                    <MudSelectItem Value="@val.nombre"> @val.nombre </MudSelectItem>
                }
            </MudSelect>

        </MudItem>

        <MudItem xs="4" sm="12" md="12">
            <MudTextField T="string" @bind-Value="regisupdt.descripcion" Label="Descripción de la Contratación" Variant="Variant.Text" Lines="20" Disabled="true" />
        </MudItem>


    </MudGrid>
    <MudContainer Class="d-flex flex-column justify-center" Style="width: 300px;padding:30px">
        <MudButton OnClick="Subir" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Error" Size="Size.Medium">
            <MudNavLink Href="" Match="NavLinkMatch.All">Guardar Proceso</MudNavLink>
        </MudButton>

    </MudContainer>


</EditForm>
@code {

    private ProcesoCompra registro = new();
   private  ProcesoCompra regisupdt = new();
   private ProcedimientoContratacion Unidad = new();
   private List<Unidad> unidad = new();

  private  List<ProcedimientoContratacion> registroProcedimientos = new();
  private  List<Etapa> etapa = new();
   private List<Estado> estado = new();
    private List<ItemPresupuestario> itemspre = new();

    ProcesoCompra procesoget = new();
    [Parameter]
    public string ID { get; set; }


    protected override async Task OnInitializedAsync()
    {
       
        await BuscarProceeso();
        await BuscarEstado();
        await BuscarEtapa();
        await BuscarProcedimientoContra();
        await PrepararProceeso();
      
 
        
        
    }
    private async Task BuscarEstado()
    {
        var response = await apiService.HttpClient.GetAsync("/api/Estado");
        try
        {
            response.EnsureSuccessStatusCode();
            estado = await response.Content.ReadFromJsonAsync<List<Estado>>();

        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", severity: Severity.Error);
        }
    }
    private async Task BuscarEtapa()
    {
        var response = await apiService.HttpClient.GetAsync("/api/Etapa");
        try
        {
            response.EnsureSuccessStatusCode();
            etapa = await response.Content.ReadFromJsonAsync<List<Etapa>>();

        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", severity: Severity.Error);
        }
    }
    private async Task BuscarItemPresupuestario()
    {
        var response = await apiService.HttpClient.GetAsync("/api/item");
        try
        {
            response.EnsureSuccessStatusCode();
            itemspre = await response.Content.ReadFromJsonAsync<List<ItemPresupuestario>>();
        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", severity: Severity.Error);
        }
    }
    private async Task BuscarUnidad()
    {
        var response = await apiService.HttpClient.GetAsync("/api/PlantaUnidadArea");
        try
        {
            response.EnsureSuccessStatusCode();
            unidad = await response.Content.ReadFromJsonAsync<List<Unidad>>();
        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", severity: Severity.Error);
        }
    }
    private async Task BuscarProcedimientoContra()
    {
        var response = await apiService.HttpClient.GetAsync("/api/ProcedimientoContratacion");
        try
        {
            response.EnsureSuccessStatusCode();
            registroProcedimientos = await response.Content.ReadFromJsonAsync<List<ProcedimientoContratacion>>();
        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", severity: Severity.Error);
        }
    }
    private async Task BuscarProceeso()
    {

        var response = await apiService.HttpClient.GetAsync($"ProcesoCompra/id?id={ID}");
        try
        {
            response.EnsureSuccessStatusCode();
            registro = await response.Content.ReadFromJsonAsync<ProcesoCompra>();
            Console.WriteLine("sebas");

        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", severity: Severity.Error);
        }
    }
    private async Task PrepararProceeso()
    {
        regisupdt.EstadoId = registro.EstadoId;
        regisupdt.ProcedimientoId = registro.ProcedimientoId;
        regisupdt.EtapaId= registro.EtapaId;
        regisupdt.PlantaId = registro.PlantaId;
        regisupdt.cpc= registro.cpc;
        regisupdt.grupoGasto= registro.grupoGasto;
        regisupdt.itemPresup= registro.itemPresup;
        regisupdt.descripcion= registro.descripcion;
        regisupdt.total= registro.total;
        regisupdt.cuatrimestre= registro.cuatrimestre;
        regisupdt.mesPlanificado= registro.mesPlanificado;
        regisupdt.ProcesoCompraId = registro.ProcesoCompraId;   
    }


    protected async Task Subir( )
    {

        HttpResponseMessage? response = new();

        try
        {
            response = await apiService.HttpClient.PutAsJsonAsync($"ProcesoCompra/id?id={ID}", regisupdt);
            snackBar.Add("Proceso Actualizado!", Severity.Success);
        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", Severity.Error);
        }
 

    }


}
