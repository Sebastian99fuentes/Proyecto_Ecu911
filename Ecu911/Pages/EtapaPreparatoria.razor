@page "/etapapreparatoria"

<PageTitle>Etapa Preparatoria</PageTitle>
<MudText Align="Align.Center" Typo="Typo.h3">Etapa Preparatoria</MudText>
<EditForm Model="@registro" >
<MudGrid Style="padding:50px">
    <MudItem xs="12" sm="6" md="6">
            <MudDatePicker PickerVariant="PickerVariant.Dialog" HelperText="Fecha programada para revisión de la documentacióna" @bind-Date="registro.fechaProgramada" DateFormat="yyyy-MM-dd" ></MudDatePicker>
    </MudItem>

    <MudItem xs="12" sm="6" md="6">
            <MudDatePicker PickerVariant="PickerVariant.Dialog" HelperText="Fecha de solicitud de revisión documentación" @bind-Date="registro.fechaSolicitud" DateFormat="yyyy-MM-dd"></MudDatePicker>
    </MudItem>

    <MudItem xs="10" sm="6" md="6">
            <MudDatePicker PickerVariant="PickerVariant.Dialog" HelperText="Fecha de respuesta efectiva Dirección Administrativa" @bind-Date="registro.fechaRespuesta" DateFormat="yyyy-MM-dd" ></MudDatePicker>
    </MudItem>

    <MudItem xs="10" sm="6" md="6">
            <MudDatePicker PickerVariant="PickerVariant.Dialog" HelperText="Fecha de mesa consultiva(con 48 horas,excepto infimas)" @bind-Date="registro.fechaMesa" DateFormat="yyyy-MM-dd" ></MudDatePicker>
    </MudItem>

    <MudItem xs="8" sm="6" md="6">
            <MudDatePicker PickerVariant="PickerVariant.Dialog" HelperText="Fecha de emisión de certificación presupuestaria" @bind-Date="registro.fechaEmision" DateFormat="yyyy-MM-dd" ></MudDatePicker>
    </MudItem>

    <MudItem xs="8" sm="6" md="6">
        <MudNumericField Immediate="false" HideSpinButtons="true" Label="Valor certificado" Format="N2" T="Decimal" @bind-Value="registro.valorCertificado" HelperText="@_valueEn.ToString()"  />

    </MudItem>

    <MudItem xs="6" sm="6" md="6">
            <MudDatePicker PickerVariant="PickerVariant.Dialog" HelperText="Fecha real de solicitud de inicio de proceso a la subdirección" @bind-Date="registro.fechaSolicitud" DateFormat="yyyy-MM-dd" ></MudDatePicker>
    </MudItem>

      <MudItem xs="6" sm="6" md="6">
            <MudDatePicker PickerVariant="PickerVariant.Dialog" HelperText="Fecha de autorización de incio de proceso" @bind-Date="registro.fechaAutorizacion" DateFormat="yyyy-MM-dd"></MudDatePicker>
    </MudItem>

          <MudItem xs="4" sm="6" md="6">
            <MudDatePicker PickerVariant="PickerVariant.Dialog" HelperText="Fecha de publicación del proceso" @bind-Date="registro.fechaPublicacion" DateFormat="yyyy-MM-dd"></MudDatePicker>
    </MudItem>

</MudGrid>
</EditForm>
<MudContainer Class="d-flex flex-column justify-center" Style="width: 300px;padding:30px">
    <MudButton Disabled="@_procesando" OnClick="Subir" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Error" Size="Size.Large">
        @if (_procesando)
        {
            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
            <MudText Class="ms-2">Procesando</MudText>
        }
        else
        {
            <MudText> Guardar</MudText>
        }


    </MudButton>
</MudContainer>
@code {
    Preparatoria registro = new();

    public double? _valueEn = 0000.00;
    private string value1 = " ", value2 = "", TextValue = "";

    //public string TextValue { get; set; }
    private bool _procesando = false;

    private async Task ProcessSomething()
    {
        _procesando = true;
        await Task.Delay(2000);
        _procesando = false;
    }

    protected async void Subir()
    {
        Preparatoria procesos = new();

        HttpResponseMessage? response = new();

        try
        {

        //NotSupportedException: Serialization and deserialization of 'System.DateTime?' instances are not supported.

            response = await apiService.HttpClient.PostAsJsonAsync("Preparatoria", registro);
        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", Severity.Error);
        }
        try
        {
            response.EnsureSuccessStatusCode();
            var data = await response.Content.ReadFromJsonAsync<CreatedResponse>();
            snackBar.Add("Proceso agregado!", Severity.Success);

        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", Severity.Error);
        }

        await ProcessSomething();

    }

}
