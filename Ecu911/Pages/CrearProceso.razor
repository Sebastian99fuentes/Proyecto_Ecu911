
@page "/crearproceso"

<PageTitle>Crear Proceso</PageTitle>

    <MudText Align="Align.Center" Typo="Typo.h3"> Crear Proceso </MudText>

<EditForm Model="@registro" >
<MudGrid Style="padding:50px">

       <MudItem xs="10" sm="6" md="6">
            <MudTextField T="string" @bind-Value="registro.numProceso" Label="Numero del Proceso" Variant="Variant.Text"  Lines="1" />
    </MudItem>

    <MudItem xs="10" sm="6" md="6">
            <MudTextField T="string" @bind-Value="registro.cpc" Label="CPC" Variant="Variant.Text"  Lines="1" />
    </MudItem>

    <MudItem xs="8" sm="6" md="6">
            <MudTextField T="string" @bind-Value="registro.grupoGasto" Label="Grupo de Gasto" Variant="Variant.Text" Lines="1" />
    </MudItem>

    <MudItem xs="8" sm="6" md="6">

            <MudTextField T="string" @bind-Value="registro.itemPresup" Label="Item Presupuestario" Variant="Variant.Text" Lines="1" />
    </MudItem>

    <MudItem xs="6" sm="6" md="6">

        <MudSelect T="ProcedimientoContratacion" Placeholder="Seleccione una Unidad" @bind-Value="Unidad" Label="Unidad" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" OnOpen="BuscarPlanta">
                @foreach (var unidad in registroProcedimientos)
                {
                    <MudSelectItem T="ProcedimientoContratacion" Value="@unidad">@unidad.tipoProcedimiento</MudSelectItem>
                }
            </MudSelect>
    </MudItem>

    <MudItem xs="6" sm="6" md="6"> 
        <MudNumericField Immediate="false" HideSpinButtons="true" Label="Total (Incluye IVA)" Format="N2" T="decimal" @bind-Value="registro.total"  />
    </MudItem>

    <MudItem xs="6" sm="6" md="6">
        <MudNumericField HideSpinButtons="true" @bind-Value="registro.cuatrimestre" Label="Cuatrimestre Planificado" Variant="Variant.Text" Min="0" Max="4" />
    </MudItem>
        <MudItem xs="6" sm="6" md="6">
            <MudTextField T="string" @bind-Value="registro.mesPlanificado" Label="Mes Planificado" Variant="Variant.Text" Lines="1" />
        </MudItem>
    <MudItem xs="4" sm="12" md="12">
            <MudTextField T="string" @bind-Value="registro.descripcion" Label="Descripción de la Contratación" Variant="Variant.Text" Lines="20" />
    </MudItem>
       

    </MudGrid>
<MudContainer Class="d-flex flex-column justify-center" Style="width: 300px;padding:30px">
        <MudButton  OnClick="Subir" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Error" Size="Size.Large">
                <MudText> Guardar Proceso</MudText>
    </MudButton>
       
</MudContainer>


</EditForm>



@code {

    ProcesoCompra registro = new();
    List<ProcedimientoContratacion> registroProcedimientos = new();
    ProcedimientoContratacion Unidad;
    List<Etapa> etapa = new();
    List<Estado> estado = new();




    private async Task BuscarEstado()
    {
        var response = await apiService.HttpClient.GetAsync("/api/Estado");
        try
        {
            response.EnsureSuccessStatusCode();
            estado = await response.Content.ReadFromJsonAsync<List<Estado>>();

        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", severity: Severity.Error);
        }
    }
    private async Task BuscarEtapa()
    {
        var response = await apiService.HttpClient.GetAsync("/api/Etapa");
        try
        {
            response.EnsureSuccessStatusCode();
            etapa = await response.Content.ReadFromJsonAsync<List<Etapa>>();

        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", severity: Severity.Error);
        }
    }
    private async Task BuscarPlanta()
    {
        var response = await apiService.HttpClient.GetAsync("/api/ProcedimientoContratacion");
        try
        {
            response.EnsureSuccessStatusCode();
            registroProcedimientos = await response.Content.ReadFromJsonAsync<List<ProcedimientoContratacion>>();
        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", severity: Severity.Error);
        }
    }


    protected  async Task Subir()
    {

        HttpResponseMessage? response = new();
        var areaToken = await sessionStorage.GetItemAsync<string>("Id-Area");
        var userToken = await sessionStorage.GetItemAsync<string>("Id-Usuario");

        await BuscarEstado();
        await BuscarEtapa();
        foreach (var item in etapa)
        {
            if (item.tipoEtapa == "Preparatoriprueba")
            {
                registro.EtapaId = item.EtapaId;
            }
          
        }
        foreach (var item in estado)
        {
            if (item.tipoEstado == "Activo")
            {
                registro.EstadoId = item.EstadoId;
            }

        }
        try
        {
            registro.ProcedimientoId = Unidad.ProcedimientoContratacionId;
            registro.PlantaId = areaToken;

            response = await apiService.HttpClient.PostAsJsonAsync("ProcesoCompra", registro);
         
       

        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", Severity.Error);
        }
        try
        {
            response.EnsureSuccessStatusCode();
            var data = await response.Content.ReadFromJsonAsync<CreatedResponse>();
            snackBar.Add("Proceso agregado!", Severity.Success);

        }
        catch (HttpRequestException)
        {

            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", Severity.Error);
        }


    }
   

}


