@page "/crearproceso"

<PageTitle>Crear Proceso</PageTitle>

<MudText Align="Align.Center" Typo="Typo.h3"> Crear Proceso </MudText>
<MudPaper Class="pa-16 ma-2" Elevation="3">
<EditForm Model="@registro">
    <MudGrid Style="padding:50px">

       <MudItem xs="8" sm="6" md="6">

            <MudSelect T="string" Placeholder="Selecciona Estado" @bind-Value="registro.EstadoId" Label="Estado" AnchorOrigin="Origin.BottomCenter" OnOpen="BuscarEstado">
                @foreach (var valor in estado)
                {

                    <MudSelectItem Value="@valor.EstadoId"> @valor.tipoEstado </MudSelectItem>
                }
            </MudSelect>
          
        </MudItem>

        <MudItem xs="10" sm="6" md="6">
           
                 <MudSelect T="string" Placeholder="seleccione ProcedimientoContratacion" @bind-Value="registro.ProcedimientoId" Label=" Procedimiento Contratacion" AnchorOrigin="Origin.BottomCenter" OnOpen="BuscarProcedimientoContra">
                @foreach (var valor in registroProcedimientos)
                {

                    <MudSelectItem Value="@valor.ProcedimientoContratacionId"> @valor.tipoProcedimiento </MudSelectItem>
                }
            </MudSelect>
        </MudItem>

         <MudItem xs="10" sm="6" md="6">
                 <MudSelect T="string" Placeholder="Selecciona Etapa" @bind-Value="registro.EtapaId" Label="Etapa" AnchorOrigin="Origin.BottomCenter" OnOpen="BuscarEtapa">
                @foreach (var valor in etapa)
                {

                    <MudSelectItem Value="@valor.EtapaId"> @valor.tipoEtapa </MudSelectItem>
                }
            </MudSelect>

            
        </MudItem>
  
        <MudItem xs="8" sm="6" md="6">
          <MudTextField T="string" @bind-Value="registro.cpc" Label="CPC" Variant="Variant.Text" Lines="1" />
        </MudItem>

        <MudItem xs="8" sm="6" md="6">
             <MudSelect T="string" @bind-Value="registro.grupoGasto" Label="Grupo de Gasto" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem Value="@("53")" />
                <MudSelectItem Value="@("84")" />
            </MudSelect>       
        </MudItem>

        <MudItem xs="6" sm="6" md="6">
            <MudSelect T="string" Placeholder="Selecciona Item" @bind-Value="registro.itemPresup" Label="Item presupuestario" AnchorOrigin="Origin.BottomCenter" OnOpen="BuscarItemPresupuestario">
                @foreach (var valor in itemspre)
                {
                    <MudSelectItem Value="@valor.nunItem"> @valor.nunItem </MudSelectItem>
                }
            </MudSelect>
        </MudItem>

        <MudItem xs="6" sm="6" md="6">

            <MudNumericField  @bind-Value="registro.cuatrimestre" Label="Cuatrimestre Planificado"  Min="0" Max="4" />
        </MudItem>
        <MudItem xs="6" sm="6" md="6">
            <MudTextField T="string" @bind-Value="registro.mesPlanificado" Label="Mes Planificado" Variant="Variant.Text" Lines="1" />
        </MudItem>
        <MudItem xs="6" sm="6" md="6">
            <MudNumericField Immediate="false" HideSpinButtons="true" Label="Total (Incluye IVA)" Format="N2" T="decimal" @bind-Value="registro.total" />
        </MudItem>
         <MudItem xs="6" sm="6" md="6">
            <MudSelect T="string" Placeholder="seleccione una unidad" @bind-Value="registro.sectorOpcional" Label="Sector opcional" AnchorOrigin="Origin.BottomCenter" OnOpen="BuscarUnidad">
                @foreach (var val in unidad)
                {

                    <MudSelectItem Value="@val.nombre"> @val.nombre </MudSelectItem>
                }
            </MudSelect>

        </MudItem>

        <MudItem xs="4" sm="12" md="12">
            <MudTextField T="string" @bind-Value="registro.descripcion" Label="Descripción de la Contratación" Variant="Variant.Text" Lines="20" />
        </MudItem>


    </MudGrid>
    <MudContainer Class="d-flex flex-column justify-center" Style="width: 300px;padding:30px">
        <MudButton OnClick="Subir" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Error" Size="Size.Medium">
           @* <MudNavLink Href="Index" Match="NavLinkMatch.Prefix"></MudNavLink>*@Guardar Proceso
        </MudButton>

    </MudContainer>


</EditForm>
 </MudPaper>

<MudContainer Class="d-flex flex-column justify-center" Style="width: 300px;padding:30px">
    <MudButton OnClick="NavigateInicio" ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Login" Color="Color.Error" Size="Size.Large">
        <MudText> Regresar Inicio</MudText>
    </MudButton>
</MudContainer>
<MudPaper Class="pa-16 ma-2" Elevation="0">
    <MudItem xs="12">
        <MudText Typo="Typo.h6" Class="d-flex flex-column align-center" Style="width: 100%; height:100%;">© 1822-2023</MudText>
        <MudText Typo="Typo.h6" Class="d-flex flex-column align-center" Style="width: 100%; height:100%;">ecu911.gob.ec</MudText>
    </MudItem>
</MudPaper>
@code {

    private ProcesoCompra registro = new(); 
    private ProcedimientoContratacion Unidad = new();
    private List<Unidad> unidad = new();

    private List<ProcedimientoContratacion> registroProcedimientos = new();
    private List<Etapa> etapa = new();
    private List<Estado> estado = new();
    private List<ItemPresupuestario> itemspre = new();



    protected override async Task OnInitializedAsync(){
        await BuscarEstado();
        await BuscarEtapa();
        await BuscarItemPresupuestario();
        await BuscarUnidad();
        await BuscarProcedimientoContra();
    }
    private async Task BuscarEstado()
    {
        var response = await apiService.HttpClient.GetAsync("/api/Estado");
        try
        {
            response.EnsureSuccessStatusCode();
            estado = await response.Content.ReadFromJsonAsync<List<Estado>>();

        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", severity: Severity.Error);
        }
    }
    private async Task BuscarEtapa()
    {
        var response = await apiService.HttpClient.GetAsync("/api/Etapa");
        try
        {
            response.EnsureSuccessStatusCode();
            etapa = await response.Content.ReadFromJsonAsync<List<Etapa>>();

        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", severity: Severity.Error);
        }
    }
    private async Task BuscarItemPresupuestario()
    {
        var response = await apiService.HttpClient.GetAsync("/api/item");
        try
        {
            response.EnsureSuccessStatusCode();
            itemspre = await response.Content.ReadFromJsonAsync<List<ItemPresupuestario>>();
        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", severity: Severity.Error);
        }
    }
    private async Task BuscarUnidad()
    {
        var response = await apiService.HttpClient.GetAsync("/api/PlantaUnidadArea");
        try
        {
            response.EnsureSuccessStatusCode();
            unidad = await response.Content.ReadFromJsonAsync<List<Unidad>>();
        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", severity: Severity.Error);
        }
    }
    private async Task BuscarProcedimientoContra()
    {
        var response = await apiService.HttpClient.GetAsync("/api/ProcedimientoContratacion");
        try
        {
            response.EnsureSuccessStatusCode();
            registroProcedimientos = await response.Content.ReadFromJsonAsync<List<ProcedimientoContratacion>>();
        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", severity: Severity.Error);
        }
    }


    protected async Task Subir()
    {

        HttpResponseMessage? response = new();

        var areaToken = await sessionStorage.GetItemAsync<string>("Id-Area");

        try 
        {

            registro.PlantaId = areaToken;

            response = await apiService.HttpClient.PostAsJsonAsync("ProcesoCompra", registro);



        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", Severity.Error);
        }
        try
        {
            response.EnsureSuccessStatusCode();
            var data = await response.Content.ReadFromJsonAsync<CreatedResponse>();
            snackBar.Add("Proceso agregado!", Severity.Info);
            NavigateInicio();
        }
        catch (HttpRequestException)
        {

            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", Severity.Error);
        }

    }
    void NavigateInicio()
    {
        navManager.NavigateTo($"/");
    }

}


