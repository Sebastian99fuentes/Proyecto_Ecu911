@page "/CrearUsuario"
@using FluentValidation

<PageTitle>Crear Usuario</PageTitle>
<MudText Align="Align.Left" Typo="Typo.h3">Registrar Nuevo Usuario</MudText>

<EditForm Model="@registro" OnValidSubmit="RegistrarUsuario">
    <MudGrid Style="padding:50px">

        <MudItem xs="12" sm="6" md="6">
            <MudTextField T="string" @bind-Value="registro.userName" Label="Nombre" Variant="Variant.Text" Lines="1" Validation="@userNameValidator.Validation" Immediate="true" />
        </MudItem>

    </MudGrid>
    <MudContainer Class="d-flex flex-column justify-center" Style="width: 300px;padding:30px">
        <MudButton OnClick="RegistrarUsuario" Variant="Variant.Filled" StartIcon="@Icons.Filled.EmojiPeople" Color="Color.Primary" Size="Size.Large">
            <MudText> Registrar Usuario</MudText>
        </MudButton>

    </MudContainer>
    <MudText Typo="Typo.h5">Nueva Contraseña:</MudText>
    <MudText Typo="Typo.subtitle1">@newPassword</MudText>


</EditForm>
@code {

    private UserRegisterRequest registro = new();

    private List<string> Roles = new();
    private string newPassword;

    UserValidator<string> userNameValidator = new UserValidator<string>(x => x
        .NotEmpty().WithMessage("Ingrese un Nombre")
        .Matches(@"\A\S+\z").WithMessage("No ingrese espacios en blanco")
        .Length(3, 25));


    public class UserValidator<T> : AbstractValidator<T>
    {
        public UserValidator(Action<IRuleBuilderInitial<T, T>> rule)
        {
            rule(RuleFor(x => x));

        }

        private IEnumerable<string> ValidateValue(T arg)
        {
            if (arg != null)
            {
                var result = Validate(arg);
                if (result.IsValid)
                    return new string[0];
                return result.Errors.Select(e => e.ErrorMessage);
            }
            return new string[0];
        }

        public Func<T, IEnumerable<string>> Validation => ValidateValue;
    }




    private async Task RegistrarUsuario()
    {
        var userId = await sessionStorage.GetItemAsync<string>("Id-Usuario");
        var response_ = await apiService.HttpClient.GetAsync($"/api/User/id?id={userId}");
        User tempUser = await response_.Content.ReadFromJsonAsync<User>();
        registro.planta = tempUser.AreaId;
        registro.rol = "USUARIO";


        var response = await apiService.HttpClient.PostAsJsonAsync("/api/Identity/register", registro);
        try
        {
            response.EnsureSuccessStatusCode();
            registro.userName = "";
            GeneratedPassword password = await response.Content.ReadFromJsonAsync<GeneratedPassword>();
            newPassword = password.Password;
            snackBar.Add("Usuario Registrado", MudBlazor.Severity.Info);
        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", MudBlazor.Severity.Error);
        }
    }
}
