@page "/login"


<PageTitle>Inicio</PageTitle>

<MudPaper Class="pa-16 ma-2" Elevation="3">
    <MudStack AlignItems="AlignItems.Center" Row="true" >
        <MudPaper Class="pa-16 ma-2" Elevation="0">
            <MudImage Fluid="true" Src="images/EcuBackground.jpg"  Class="rounded-lg" ObjectFit="ObjectFit.Cover" />
            </MudPaper>
        <MudPaper Class="pa-16 ma-2;rounded-lg" Elevation="3">
            <EditForm Model="@login" OnValidSubmit="@ValidateUser">
                <MudGrid Class="align-center" Style="padding:50px">
                    <MudContainer Class="d-flex flex-column align-center rounded-lg" Style="width: 100%; height:100%; ">
                            <MudItem xs="12" >
                            <MudText Typo="Typo.h5" Class="d-flex flex-column align-center">Bienvenido</MudText>
                                <MudTextField Label="Usuario" Immediate="true" @bind-Value="login.userName" Variant="Variant.Outlined" ></MudTextField>
                                <MudTextField Immediate="true" T="string" InputType="@inputType" Label="Password" @attributes="@InputPasswdAttributes" @bind-Value="@login.password"
                                              Variant="Variant.Outlined" For="@(() => login.password)" Adornment="@Adornment.End" AdornmentIcon="@watchPwd" OnAdornmentClick="@ShowNotShowPwd" />
                            </MudItem>
                        <MudCardActions>
                            <div class="center-button rigth-element">
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Login" Color="Color.Info">Ingresar</MudButton>
                            </div>
                        </MudCardActions>
                    </MudContainer>
                </MudGrid>
            </EditForm>
        </MudPaper>
       
    </MudStack>
</MudPaper>
<MudPaper Class="pa-16 ma-2" Elevation="0">
    <MudItem xs="12">
        <MudText Typo="Typo.h6" Class="d-flex flex-column align-center" Style="width: 100%; height:100%;">© 1822-2023</MudText>
        <MudText Typo="Typo.h6" Class="d-flex flex-column align-center" Style="width: 100%; height:100%;">ecu911.gob.ec</MudText>
    </MudItem>
</MudPaper>

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@code {

    public ObjectFit ImageFit { get; set; } = ObjectFit.Cover;

    private string usuario = " ", password = "", TextValue = "", _tokenModel = "";

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> InputPasswdAttributes { get; set; } =
    new Dictionary<string, object>()
        {
        { "autocomplete", "current-password" }
        };
    private Dictionary<string, object> InputUserAttributes { get; set; } =
    new Dictionary<string, object>()
        {
        { "autocomplete", "username" }
        };

    LoginModel login = new LoginModel();

    readonly static string show = Icons.Material.Filled.Visibility;
    readonly static string notShow = Icons.Material.Filled.VisibilityOff;
    const InputType inputTypePass = InputType.Password;
    const InputType inputTypeText = InputType.Text;
    bool shown = false;

    private string watchPwd = show;
    InputType inputType = inputTypePass;


    
    private async Task ValidateUser(){
        var uri = navManager.ToAbsoluteUri(navManager.Uri);
        var tempUrl = QueryHelpers.ParseQuery(uri.Query).TryGetValue("ReturnUrl", out var ReturnUrl);
        var response = await apiService.HttpClient.PostAsJsonAsync("Identity/login", login);
       
        try
        {
            response.EnsureSuccessStatusCode();
            var data = await response.Content.ReadFromJsonAsync<SuccessfulLogin>();
            await ((CustomAuthenticationStateProvider)authProvider).SetUserAsAuthenticated(data);
            navManager.NavigateTo($"/{ReturnUrl}", true);

        }
        catch (HttpRequestException)
        {
            snackBar.Add("Usuario o contraseña incorrectos");
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", Severity.Error);
        }
    }

  
    protected void ShowNotShowPwd()
    {
        if (!shown)
        {
            watchPwd = notShow;
            inputType = inputTypeText;
            shown = true;
        }
        else
        {
            watchPwd = show;
            inputType = inputTypePass;
            shown = false;
        }
    }

}