@page "/etapaprecontractual"
@page "/etapaprecontractual/{id}"
@attribute [Authorize(Roles = "SUPERADMINISTRADOR,USUARIO")]
<PageTitle>Etapa Pre-Contractual</PageTitle>
<MudText Align="Align.Center" Typo="Typo.h3" >Etapa PreContractual</MudText>
<MudPaper Class="pa-16 ma-2" Elevation="3">
<EditForm Model="@registro">

    <MudGrid Style="padding:50px">

        <MudItem xs="12" sm="6" md="6">
            <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Preguntas/Respuestas y aclaraciónes" @bind-Date="registro.preguntasRespuestas" DateFormat="yyyy-MM-dd"></MudDatePicker>
        </MudItem>
        <MudItem xs="12" sm="6" md="6">
            <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Recepción de ofertas" @bind-Date="registro.recepcionOfertas" DateFormat="yyyy-MM-dd"></MudDatePicker>
        </MudItem>
        <MudItem xs="8" sm="6" md="6">
            <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Calificación de ofertas y convalidación de errores" @bind-Date="registro.calificacionOfertas" DateFormat="yyyy-MM-dd"></MudDatePicker>
        </MudItem>

        <MudItem xs="8" sm="6" md="6">
            <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Puja/Negociación" @bind-Date="registro.pujaNegociacion" DateFormat="yyyy-MM-dd"></MudDatePicker>
        </MudItem>

           <MudItem xs="6" sm="6" md="6">
            <MudDatePicker PickerVariant="PickerVariant.Dialog" Label="Adjudicación(estimada)" @bind-Date="registro.adjudicacion" DateFormat="yyyy-MM-dd"></MudDatePicker>
        </MudItem>

    </MudGrid>
</EditForm>
<MudContainer Class="d-flex flex-column justify-center" Style="width: 300px;padding:30px">
    <MudButton OnClick="Subir" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Error" Size="Size.Large">
        <MudText> Guardar</MudText>
    </MudButton>
</MudContainer>


</MudPaper>

<MudContainer Class="d-flex flex-column justify-center" Style="width: 300px;padding:30px">
    <MudButton OnClick="NavigateEstados" ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Login" Color="Color.Error" Size="Size.Large">
        <MudText> Regresar</MudText>
    </MudButton>
</MudContainer>
<MudPaper Class="pa-16 ma-2" Elevation="0">
    <MudItem xs="12">
        <MudText Typo="Typo.h6" Class="d-flex flex-column align-center" Style="width: 100%; height:100%;">© 1822-2023</MudText>
        <MudText Typo="Typo.h6" Class="d-flex flex-column align-center" Style="width: 100%; height:100%;">ecu911.gob.ec</MudText>
    </MudItem>
</MudPaper>
@code {



    private Precontractual registro = new();

    private List<Etapa> etapa = new();



    [Parameter]
    public string id { get; set; }

     private Logs loguser = new Logs();

    protected override async Task OnInitializedAsync()
    {
        await apiService.SetAuthHeaders();

       
    }


    protected async void Subir()
    {
        Precontractual procesos = new();
        HttpResponseMessage? response = new();


        try
        {
            registro.IdPreparatoria = id;
            response = await apiService.HttpClient.PostAsJsonAsync("Precontractual", registro);

        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", Severity.Error);
        }
        try
        {
            response.EnsureSuccessStatusCode();
            var data = await response.Content.ReadFromJsonAsync<CreatedResponse>();
            snackBar.Add("Etapa  actualizada!", Severity.Info);
            await RegistroLogs();
            NavigateEstados();


        }
        catch (HttpRequestException)
        {

            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", Severity.Error);
        }



    }
     private async Task RegistroLogs()
    {

        HttpResponseMessage? response = new();

        loguser.userName = await sessionStorage.GetItemAsync<string>("Id");
        loguser.action = "Etapa  actualizada precontractual "+ id;
        //logs
        try
        {
            response = await apiService.HttpClient.PostAsJsonAsync("Logs", loguser);
        }
        catch (HttpRequestException)
        {
            var data2 = await response.Content.ReadFromJsonAsync<ResponseModel>();
            Console.WriteLine($"{data2.Message}", Severity.Error);
        }
    }


    protected async void NavigateEstados()
    {

        var userId = await sessionStorage.GetItemAsync<string>("Id-prepatoria");
        navManager.NavigateTo($"EstadosProcesoRevision/{userId}");
    }

}


