@page "/usuarios"
<PageTitle>Administración de Usuarios</PageTitle>

@*
    <MudText Align="Align.Center" Typo="Typo.h3">Registrar Nuevo Usuario</MudText>

<EditForm Model="@registro" >
<MudGrid Style="padding:50px">

    <MudItem xs="10" sm="6" md="6">
            <MudTextField T="string" @bind-Value="registro.userName" Label="Nombre" Variant="Variant.Text"  Lines="1" />
    </MudItem>

    <MudItem xs="8" sm="6" md="6">
            <MudTextField T="string" @bind-Value="registro.email" Label="E-mail" Variant="Variant.Text" Lines="1" InputType="InputType.Email" />
    </MudItem>

    <MudItem xs="8" sm="6" md="6">

            <MudTextField T="string" @bind-Value="registro.password" Label="Contraseña" Variant="Variant.Text" Lines="1" />
    </MudItem>


        <MudItem xs="10" sm="6" md="6">
            <MudSelect Placeholder="Seleccione una Planta" T="PlantaUnidadArea" @bind-Value="Planta" Label="Planta" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" OnOpen="BuscarPlanta">
                @foreach(var planta in Plantas){
                    <MudSelectItem T="PlantaUnidadArea" Value="@planta">@planta.nombre</MudSelectItem>
                }
            </MudSelect>

            <MudSelect T="PlantaUnidadArea" Placeholder="Seleccione una Unidad" @bind-Value="Unidad" Label="Unidad" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" OnOpen="BuscarUnidad">
                @foreach (var unidad in Unidades)
                {
                    <MudSelectItem T="PlantaUnidadArea" Value="@unidad">@unidad.nombre</MudSelectItem>
                }
            </MudSelect>

            <MudSelect T="PlantaUnidadArea" Placeholder="Seleccione un Area" @bind-Value="Area" Label="Unidad" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" OnOpen="BuscarArea">
                @foreach (var area in Areas)
                {
                    <MudSelectItem T="PlantaUnidadArea" Value="@area">@area.nombre</MudSelectItem>
                }
            </MudSelect>
        </MudItem>

    <MudItem xs="6" sm="6" md="4">

       
    </MudItem>



    </MudGrid>
<MudContainer Class="d-flex flex-column justify-center" Style="width: 300px;padding:30px">


</MudContainer>


</EditForm>



@code {
    UserRegisterRequest registro = new();

    List<PlantaUnidadArea> Plantas = new();
    PlantaUnidadArea Planta;
    List<PlantaUnidadArea> Unidades = new();
    PlantaUnidadArea Unidad;
    List<PlantaUnidadArea> Areas = new();
    PlantaUnidadArea Area;



    private async Task BuscarPlanta()
    {
        var response = await apiService.HttpClient.GetAsync("PlantaUnidadArea/tipo?tipo=" + 'P');
        try
        {
            response.EnsureSuccessStatusCode();
            Plantas = await response.Content.ReadFromJsonAsync<List<PlantaUnidadArea>>();
        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", Severity.Error);
        }
    }


    private async Task BuscarUnidad()
    {
        if(Planta != null)
            Unidades = await BuscarPadre(Planta.PlantaUnidadAreaId);
    }

    private async Task BuscarArea()
    {
        if(Unidad != null)
            Areas = await BuscarPadre(Unidad.PlantaUnidadAreaId);
    }

    private async Task<List<PlantaUnidadArea>> BuscarPadre(string id){
        var response = await apiService.HttpClient.GetAsync("PlantaUnidadArea/padre?padreId=" + id);
        List<PlantaUnidadArea> zonas = new();
        try
        {
            response.EnsureSuccessStatusCode();
            zonas = await response.Content.ReadFromJsonAsync<List<PlantaUnidadArea>>();
        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", Severity.Error);
        }
        return zonas;
    }
}
*@