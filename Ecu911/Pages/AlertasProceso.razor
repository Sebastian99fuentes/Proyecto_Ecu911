@page "/Alertas/{Proceso}"
<h3></h3>

<MudCardContent Class="d-flex  flex-column  align-center  ">

    <MudText Typo="Typo.h3" GutterBottom="true">Alertas Proceso</MudText>
    <MudText Class="mb-12">alertas encontradas: @Proceso</MudText>
    <MudItem xs="12" sm="12" md="12" Class="d-flex  flex-column  align-center" >
    <MudGrid>
        <MudSimpleTable >
            <thead>
                <tr>
                    <th >No. </th>
                    <th>alerta </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in alertas)
                {
                    <tr>
                        <td >@item.ProcesoCompraId</td>
                        <td >@item.descripcionAlerta</td>

                    </tr>
                }
            </tbody>
        </MudSimpleTable>
    </MudGrid>
    </MudItem>
    <MudItem xs="12" sm="12" md="12" Class="d-flex flex-column justify-center" Style="padding:30px">
        <MudText Typo="Typo.h3" GutterBottom="true">Ingresar alertas</MudText>
    </MudItem>
   
</MudCardContent>

<EditForm Model="@alerta">
   
    <MudItem xs="12" sm="12" md="12">
        <MudTextField T="string" @bind-Value="alerta.descripcionAlerta" Label="Descripción de Alerta" Variant="Variant.Text" Lines="20" />
    </MudItem>
    <MudContainer Class="d-flex flex-column justify-center" Style="width: 300px;padding:30px">
        <MudButton  OnClick="agregarAlerta" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Error" Size="Size.Large">
                <MudText> Guardar Observacion</MudText>
        </MudButton>
    </MudContainer>
    <MudContainer>
            <MudButton OnClick="NavigateInicio" ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Login" Color="Color.Error" Size="Size.Large">
            <MudText> Regresar</MudText>
        </MudButton>
    </MudContainer>
</EditForm>



@code {



    AlertaDSPPP alerta = new AlertaDSPPP();
    ProcesoCompra procesocompra = new ProcesoCompra();
    List<AlertaDSPPP> alertas = new();

    [Parameter]
    public string Proceso { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var response = await apiService.HttpClient.GetAsync($"ProcesoCompra/id?id={Proceso}");
        alerta.ProcesoCompraId = Proceso;
        try
        {
            response.EnsureSuccessStatusCode();
            procesocompra = await response.Content.ReadFromJsonAsync<ProcesoCompra>();
            foreach (var item in procesocompra.AlertasDSPPP)
            {

                alertas.Add(item);
            }
        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", severity: Severity.Error);
        }
    }

    protected async void agregarAlerta()
    {


        HttpResponseMessage? response = new();

       
        try
        {
            response = await apiService.HttpClient.PostAsJsonAsync("Alerta", alerta);
           
        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", Severity.Error);
        }
        try
        {
            response.EnsureSuccessStatusCode();
            var data = await response.Content.ReadFromJsonAsync<CreatedResponse>();
            snackBar.Add("Alerta agregada!", Severity.Success);

        }
        catch (HttpRequestException)
        {


            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", Severity.Error);
        }

      

    }

    private bool _procesando = false;


    void NavigateInicio()
    {
        navManager.NavigateTo($"/");
    }


}
