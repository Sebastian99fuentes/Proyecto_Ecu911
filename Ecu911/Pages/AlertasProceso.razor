@page "/Alertas/{Proceso}"
<h3></h3>

<MudCardContent Class="d-flex  flex-column  align-center  ">

    <MudText Typo="Typo.h3" GutterBottom="true">Alertas Proceso</MudText>
    <MudText Class="mb-12">alertas encontradas</MudText>
    <MudItem xs="12" Class="d-flex  flex-column  align-center" >
    <MudGrid>
            <MudSimpleTable Hover="true" Dense="true" >
                <thead>
                    <tr>
                        <th>Descripción </th>
                     
                    </tr>
                </thead>
            <tbody>
                @foreach (var item in alertas)
                {
                    <tr>

                        <td >@item.descripcionAlerta</td>
                    </tr>
                }
            </tbody>
        </MudSimpleTable>
    </MudGrid>
    </MudItem>
   
   
</MudCardContent>
<MudPaper Class="pa-16 ma-2" Elevation="3">

<EditForm Model="@alerta">
   
    <MudItem xs="12" sm="12" md="12">
        <MudTextField T="string" @bind-Value="alerta.descripcionAlerta" Label="Descripción de Alerta" Variant="Variant.Text" Lines="20" />
    </MudItem>
    <MudContainer Class="d-flex flex-column justify-center" Style="width: 300px;padding:30px">
        <MudButton  OnClick="agregarAlerta" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Error" Size="Size.Large">
            <MudText> Guardar alerta</MudText>
        </MudButton>
    </MudContainer>

</EditForm>
</MudPaper>

<MudContainer Class="d-flex flex-column justify-center" Style="width: 300px;padding:30px">
    <MudButton OnClick="NavigateInicio" ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Login" Color="Color.Error" Size="Size.Large">
        <MudText> Regresar</MudText>
    </MudButton>
</MudContainer>
<MudPaper Class="pa-16 ma-2" Elevation="0">
    <MudItem xs="12">
        <MudText Typo="Typo.h6" Class="d-flex flex-column align-center" Style="width: 100%; height:100%;">© 1822-2023</MudText>
        <MudText Typo="Typo.h6" Class="d-flex flex-column align-center" Style="width: 100%; height:100%;">ecu911.gob.ec</MudText>
    </MudItem>
</MudPaper>

@code {



    private AlertaDSPPP alerta = new AlertaDSPPP();
    private ProcesoCompra procesocompra = new ProcesoCompra();
    private List<AlertaDSPPP> alertas = new();

    [Parameter]
    public string Proceso { get; set; }

    private Logs loguser = new Logs();
    protected override async Task OnInitializedAsync()
    {
        await apiService.SetAuthHeaders();

        await traerpro();
    }

    protected async Task  traerpro(){

        var response = await apiService.HttpClient.GetAsync($"ProcesoCompra/id?id={Proceso}");
        alerta.ProcesoCompraId = Proceso;
        try
        {
            response.EnsureSuccessStatusCode();
            procesocompra = await response.Content.ReadFromJsonAsync<ProcesoCompra>();
            foreach (var item in procesocompra.AlertasDSPPP)
            {

                alertas.Add(item);
            }
        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", severity: Severity.Error);
        }
    }
    protected async Task agregarAlerta()
    {


        HttpResponseMessage? response = new();


        try
        {
            response = await apiService.HttpClient.PostAsJsonAsync("Alerta", alerta);

        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", Severity.Error);
        }
        try
        {
            response.EnsureSuccessStatusCode();
            var data = await response.Content.ReadFromJsonAsync<CreatedResponse>();
            snackBar.Add("Alerta agregada!", Severity.Info);
            await RegistroLogs();
            NavigateInicio();

        }
        catch (HttpRequestException)
        {


            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", Severity.Error);
        }

      

    }

  
    private async Task RegistroLogs()
    {

        HttpResponseMessage? response = new();

        loguser.userName = await sessionStorage.GetItemAsync<string>("Id");
        loguser.action = $"Agrego alerta en proceso con id ={Proceso}";
        //logs
        try
        {
            response = await apiService.HttpClient.PostAsJsonAsync("Logs", loguser);
        }
        catch (HttpRequestException)
        {
            var data2 = await response.Content.ReadFromJsonAsync<ResponseModel>();
            Console.WriteLine($"{data2.Message}", Severity.Error);
        }
    }

    void NavigateInicio()
    {
        navManager.NavigateTo($"/");
    }


}
