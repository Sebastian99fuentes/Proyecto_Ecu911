@page "/Observaciones/{Proceso}"

<MudCardContent Class="d-flex  flex-column  align-center  ">

    <MudText Typo="Typo.h3" GutterBottom="true">Observaciones Proceso</MudText>
    <MudText Class="mb-12">Observaciones encontradas</MudText>

    <MudItem xs="12" sm="12" md="12" Class="d-flex  flex-column  align-center" >
         <MudGrid>
            <MudSimpleTable Hover="true" Dense="true">
            <thead>
                <tr>
                    <th>observacion </th>
                        <th>fechaObsservacion</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in observaciones)
                {
                    <tr>
                        <td>@item.descripcionObservacion</td>
                         <td>@item.fechaObsservacion</td>
                    </tr>
                }
            </tbody>
        </MudSimpleTable>
    </MudGrid>
    </MudItem>
    
</MudCardContent>


<MudPaper Class="pa-16 ma-2" Elevation="3">

<EditForm Model="@observacion">
   
    <MudItem xs="12" sm="12" md="12">
        <MudTextField T="string" @bind-Value="observacion.descripcionObservacion" Label="Descripción de la observacion" Variant="Variant.Text" Lines="20" />
    </MudItem>
    <MudContainer Class="d-flex flex-column justify-center" Style="width: 300px;padding:30px">
        <MudButton OnClick="agregarObservacion" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Color="Color.Error" Size="Size.Large">
            <MudText> Guardar Observacion</MudText>
        </MudButton>
    </MudContainer>

   
</EditForm>
</MudPaper>

<MudContainer Class="d-flex flex-column justify-center" Style="width: 300px;padding:30px">
    <MudButton OnClick="NavigateInicio" ButtonType="ButtonType.Submit" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Login" Color="Color.Error" Size="Size.Large">
        <MudText> Regresar</MudText>
    </MudButton>
</MudContainer>
<MudPaper Class="pa-16 ma-2" Elevation="0">
    <MudItem xs="12">
        <MudText Typo="Typo.h6" Class="d-flex flex-column align-center" Style="width: 100%; height:100%;">© 1822-2023</MudText>
        <MudText Typo="Typo.h6" Class="d-flex flex-column align-center" Style="width: 100%; height:100%;">ecu911.gob.ec</MudText>
    </MudItem>
</MudPaper>

@code {

    private Observacion observacion = new Observacion();
    private ProcesoCompra procesocompra = new ProcesoCompra();
    private List<Observacion> observaciones = new();


    [Parameter]
    public string Proceso { get; set; }


    protected override async Task OnInitializedAsync()
    {

        await getObs();
    }

    private async Task getObs()
    {
        var response = await apiService.HttpClient.GetAsync($"ProcesoCompra/id?id={Proceso}");
        try
        {
            response.EnsureSuccessStatusCode();
            procesocompra = await response.Content.ReadFromJsonAsync<ProcesoCompra>();
            foreach (var item in procesocompra.Observaciones)
            {
                observaciones.Add(item);
            }
        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", severity: Severity.Error);
        }
    }


    protected async void agregarObservacion()
    {


        HttpResponseMessage? response = new();
        observacion.ProcesoId = Proceso;
        observacion.fechaObsservacion = DateTime.Now;
        try
        {
            response = await apiService.HttpClient.PostAsJsonAsync("Observacion", observacion);

        }
        catch (HttpRequestException)
        {
            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", Severity.Error);
        }
        try
        {
            response.EnsureSuccessStatusCode();
            var data = await response.Content.ReadFromJsonAsync<CreatedResponse>();
            snackBar.Add("  Observacion  agregada!", Severity.Info);
            NavigateInicio();
        }
        catch (HttpRequestException)
        {

            var data = await response.Content.ReadFromJsonAsync<ResponseModel>();
            snackBar.Add($"{data.Message}", Severity.Error);
        }
       

    }

    void NavigateInicio()
    {
        navManager.NavigateTo($"/");
    }
   
}

